// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	address "github.com/modular-project/protobuffers/address/address"

	mock "github.com/stretchr/testify/mock"
)

// AddDeliveryServicer is an autogenerated mock type for the AddDeliveryServicer type
type AddDeliveryServicer struct {
	mock.Mock
}

// CreateDelivery provides a mock function with given fields: _a0, _a1
func (_m *AddDeliveryServicer) CreateDelivery(_a0 context.Context, _a1 *address.Delivery) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *address.Delivery) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.Delivery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: _a0, _a1
func (_m *AddDeliveryServicer) DeleteByID(_a0 context.Context, _a1 *address.User) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *address.User) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUser provides a mock function with given fields: _a0, _a1
func (_m *AddDeliveryServicer) GetAllByUser(_a0 context.Context, _a1 *address.User) ([]*address.Address, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*address.Address
	if rf, ok := ret.Get(0).(func(context.Context, *address.User) []*address.Address); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *AddDeliveryServicer) GetByID(_a0 context.Context, _a1 *address.User) (*address.Address, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *address.Address
	if rf, ok := ret.Get(0).(func(context.Context, *address.User) *address.Address); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddDeliveryServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddDeliveryServicer creates a new instance of AddDeliveryServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddDeliveryServicer(t mockConstructorTestingTNewAddDeliveryServicer) *AddDeliveryServicer {
	mock := &AddDeliveryServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

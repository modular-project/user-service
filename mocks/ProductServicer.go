// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	product "github.com/modular-project/protobuffers/information/product"
)

// ProductServicer is an autogenerated mock type for the ProductServicer type
type ProductServicer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ProductServicer) Create(_a0 context.Context, _a1 *product.Product) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, *product.Product) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ProductServicer) Delete(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ProductServicer) Get(_a0 context.Context, _a1 uint64) (product.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(context.Context, uint64) product.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *ProductServicer) GetAll(_a0 context.Context) ([]*product.Product, error) {
	ret := _m.Called(_a0)

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func(context.Context) []*product.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInBatch provides a mock function with given fields: _a0, _a1
func (_m *ProductServicer) GetInBatch(_a0 context.Context, _a1 []uint64) ([]*product.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) []*product.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProductServicer) Update(_a0 context.Context, _a1 uint64, _a2 *product.Product) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *product.Product) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *product.Product) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductServicer creates a new instance of ProductServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductServicer(t mockConstructorTestingTNewProductServicer) *ProductServicer {
	mock := &ProductServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	order "github.com/modular-project/protobuffers/order/order"
)

// OrderServicer is an autogenerated mock type for the OrderServicer type
type OrderServicer struct {
	mock.Mock
}

// AddProductsToOrder provides a mock function with given fields: ctx, in
func (_m *OrderServicer) AddProductsToOrder(ctx context.Context, in *order.AddProductsToOrderRequest) (*order.AddProductsToOrderResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.AddProductsToOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.AddProductsToOrderRequest) *order.AddProductsToOrderResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.AddProductsToOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.AddProductsToOrderRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliveryOrder provides a mock function with given fields: ctx, in
func (_m *OrderServicer) CreateDeliveryOrder(ctx context.Context, in *order.Order) (*order.ID, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.ID
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) *order.ID); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.Order) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocalOrder provides a mock function with given fields: ctx, in
func (_m *OrderServicer) CreateLocalOrder(ctx context.Context, in *order.Order) (*order.ID, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.ID
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) *order.ID); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.Order) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *OrderServicer) GetOrderByID(ctx context.Context, id uint64) ([]*order.OrderProduct, error) {
	ret := _m.Called(ctx, id)

	var r0 []*order.OrderProduct
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*order.OrderProduct); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByWaiter provides a mock function with given fields: ctx, wID
func (_m *OrderServicer) GetOrderByWaiter(ctx context.Context, wID uint64) (*order.OrdersResponse, error) {
	ret := _m.Called(ctx, wID)

	var r0 *order.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *order.OrdersResponse); ok {
		r0 = rf(ctx, wID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, wID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, s
func (_m *OrderServicer) GetOrders(ctx context.Context, s *order.SearchOrders) (*order.OrdersResponse, error) {
	ret := _m.Called(ctx, s)

	var r0 *order.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.SearchOrders) *order.OrdersResponse); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.SearchOrders) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByEstablishment provides a mock function with given fields: ctx, s
func (_m *OrderServicer) GetOrdersByEstablishment(ctx context.Context, s *order.SearchOrders) (*order.OrdersResponse, error) {
	ret := _m.Called(ctx, s)

	var r0 *order.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.SearchOrders) *order.OrdersResponse); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.SearchOrders) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByKitchen provides a mock function with given fields: ctx, kID
func (_m *OrderServicer) GetOrdersByKitchen(ctx context.Context, kID uint64) (*order.OrderProductsResponse, error) {
	ret := _m.Called(ctx, kID)

	var r0 *order.OrderProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *order.OrderProductsResponse); ok {
		r0 = rf(ctx, kID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, kID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUser provides a mock function with given fields: ctx, s
func (_m *OrderServicer) GetOrdersByUser(ctx context.Context, s *order.SearchOrders) (*order.OrdersResponse, error) {
	ret := _m.Called(ctx, s)

	var r0 *order.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.SearchOrders) *order.OrdersResponse); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.SearchOrders) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderServicer creates a new instance of OrderServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderServicer(t mockConstructorTestingTNewOrderServicer) *OrderServicer {
	mock := &OrderServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

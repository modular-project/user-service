// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "users-service/model"

	mock "github.com/stretchr/testify/mock"
)

// CanHirer is an autogenerated mock type for the CanHirer type
type CanHirer struct {
	mock.Mock
}

// CanFire provides a mock function with given fields: from, target
func (_m *CanHirer) CanFire(from uint, target uint) error {
	ret := _m.Called(from, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(from, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanHire provides a mock function with given fields: _a0, _a1, _a2
func (_m *CanHirer) CanHire(_a0 uint, _a1 string, _a2 *model.UserRole) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, *model.UserRole) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCanHirer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCanHirer creates a new instance of CanHirer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCanHirer(t mockConstructorTestingTNewCanHirer) *CanHirer {
	mock := &CanHirer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	order "github.com/modular-project/protobuffers/order/order"
)

// OrderStatusServicer is an autogenerated mock type for the OrderStatusServicer type
type OrderStatusServicer struct {
	mock.Mock
}

// CapturePayment provides a mock function with given fields: ctx, in
func (_m *OrderStatusServicer) CapturePayment(ctx context.Context, in *order.CapturePaymentRequest) (*order.CapturePaymentResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.CapturePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.CapturePaymentRequest) *order.CapturePaymentResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.CapturePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.CapturePaymentRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteProduct provides a mock function with given fields: ctx, in
func (_m *OrderStatusServicer) CompleteProduct(ctx context.Context, in *order.CompleteProductRequest) (*order.CompleteProductResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.CompleteProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.CompleteProductRequest) *order.CompleteProductResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.CompleteProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.CompleteProductRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayDelivery provides a mock function with given fields: ctx, in
func (_m *OrderStatusServicer) PayDelivery(ctx context.Context, in *order.PayDeliveryRequest) (*order.PayDeliveryResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.PayDeliveryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.PayDeliveryRequest) *order.PayDeliveryResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.PayDeliveryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.PayDeliveryRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayLocal provides a mock function with given fields: ctx, in
func (_m *OrderStatusServicer) PayLocal(ctx context.Context, in *order.PayLocalRequest) (*order.PayLocalResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *order.PayLocalResponse
	if rf, ok := ret.Get(0).(func(context.Context, *order.PayLocalRequest) *order.PayLocalResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.PayLocalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.PayLocalRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderStatusServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderStatusServicer creates a new instance of OrderStatusServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderStatusServicer(t mockConstructorTestingTNewOrderStatusServicer) *OrderStatusServicer {
	mock := &OrderStatusServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

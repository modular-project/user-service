// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	address "github.com/modular-project/protobuffers/address/address"

	mock "github.com/stretchr/testify/mock"
)

// AddressServicer is an autogenerated mock type for the AddressServicer type
type AddressServicer struct {
	mock.Mock
}

// CreateEstablishment provides a mock function with given fields: _a0, _a1
func (_m *AddressServicer) CreateEstablishment(_a0 context.Context, _a1 *address.Address) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *address.Address) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEstablishment provides a mock function with given fields: _a0, _a1
func (_m *AddressServicer) DeleteEstablishment(_a0 context.Context, _a1 string) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddByID provides a mock function with given fields: _a0, _a1
func (_m *AddressServicer) GetAddByID(_a0 context.Context, _a1 *address.ID) (*address.Address, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *address.Address
	if rf, ok := ret.Get(0).(func(context.Context, *address.ID) *address.Address); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *address.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressServicer creates a new instance of AddressServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressServicer(t mockConstructorTestingTNewAddressServicer) *AddressServicer {
	mock := &AddressServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

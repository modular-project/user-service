// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	order "github.com/modular-project/protobuffers/information/order"
	mock "github.com/stretchr/testify/mock"
)

// validater is an autogenerated mock type for the validater type
type validater struct {
	mock.Mock
}

// ValidateOrder provides a mock function with given fields: _a0, _a1
func (_m *validater) ValidateOrder(_a0 context.Context, _a1 *order.ValidateOrderRequest) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(context.Context, *order.ValidateOrderRequest) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.ValidateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateProducts provides a mock function with given fields: _a0, _a1
func (_m *validater) ValidateProducts(_a0 context.Context, _a1 *order.ValidateProductsRequest) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(context.Context, *order.ValidateProductsRequest) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *order.ValidateProductsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewValidater interface {
	mock.TestingT
	Cleanup(func())
}

// newValidater creates a new instance of validater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newValidater(t mockConstructorTestingTnewValidater) *validater {
	mock := &validater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

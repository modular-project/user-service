// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "users-service/model"

	mock "github.com/stretchr/testify/mock"
)

// UserStorager is an autogenerated mock type for the UserStorager type
type UserStorager struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: UserID, password
func (_m *UserStorager) ChangePassword(UserID uint, password *string) error {
	ret := _m.Called(UserID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *string) error); ok {
		r0 = rf(UserID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *UserStorager) Create(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *UserStorager) Find(id uint) (model.User, error) {
	ret := _m.Called(id)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(uint) model.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: _a0
func (_m *UserStorager) FindByEmail(_a0 *string) (model.User, error) {
	ret := _m.Called(_a0)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(*string) model.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmployee provides a mock function with given fields: userID
func (_m *UserStorager) IsEmployee(userID uint) (model.RoleID, bool, error) {
	ret := _m.Called(userID)

	var r0 model.RoleID
	if rf, ok := ret.Get(0).(func(uint) model.RoleID); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.RoleID)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uint) bool); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: _a0
func (_m *UserStorager) Update(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verify provides a mock function with given fields: UserID
func (_m *UserStorager) Verify(UserID uint) error {
	ret := _m.Called(UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserStorager interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStorager creates a new instance of UserStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStorager(t mockConstructorTestingTNewUserStorager) *UserStorager {
	mock := &UserStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Addresser is an autogenerated mock type for the Addresser type
type Addresser struct {
	mock.Mock
}

// GetByAddress provides a mock function with given fields: _a0, _a1
func (_m *Addresser) GetByAddress(_a0 context.Context, _a1 string) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddresser interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddresser creates a new instance of Addresser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddresser(t mockConstructorTestingTNewAddresser) *Addresser {
	mock := &Addresser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
